{"version":3,"sources":["components/Loading.js","App.js","serviceWorker.js","index.js","utils/local.js","components/pageSpin/index.js","config/pageComponents.js","store/userReducer.js","store/globalReducer.js","store/store.js","store/type.js","store/action.js"],"names":["Loading","className","tip","indicator","type","style","fontSize","spin","connect","state","props","Object","assign","isLoading","globalReducer","useEffect","path","component","Login","exact","Error","Admin","Boolean","window","location","hostname","match","localUser","getLocalUser","store","dispatch","setUserInfo","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","setLocalUser","userinfo","set","get","clearLocalUser","remove","PageSpin","Loadable","loader","loading","Home","Income","Bar","Line","Pie","User","Role","Prop","Model","defaultUser","info","defaultParams","isCollapsed","reducers","combineReducers","userReducer","action","CHANGE_USERINO","user","CHANGE_LOGOUT","CHANGE_LOADING","value","CHANGE_COLLAPSED","createStore","__REDUX_DEVTOOLS_EXTENSION__","setLoading","setMenuCollapsed","setLogout"],"mappings":"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","file":"static/js/main.257835cc.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Spin, Icon } from 'antd';\r\n\r\nfunction Loading() {\r\n    return (\r\n        <div className=\"loading-white-mask\">\r\n            <Spin className=\"loading\" tip=\"Loading...\" indicator={<Icon type=\"loading\" style={{ fontSize: 42 }} spin />} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import React, { useEffect, Fragment } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport Loading from '@components/Loading';\r\n\r\nimport { Login, Error, Admin } from '@config/pageComponents';\r\n\r\n\r\nfunction App(props) {\r\n  let isLoading = props.globalReducer.isLoading;\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    return () => {\r\n\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Switch>\r\n\r\n        <Route path=\"/login\" component={Login} />\r\n\r\n        <Route path=\"/404\" exact component={Error} />\r\n\r\n        <Route path=\"/\" component={Admin} />\r\n\r\n      </Switch>\r\n      {\r\n        isLoading ? <Loading /> : null\r\n      }\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default connect((state, props) => Object.assign({}, props, state))(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '@css/index.css';\r\nimport '@css/reset.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux'\r\nimport store from '@store/store'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { getLocalUser } from '@utils/local';\r\nimport { setUserInfo } from '@store/action';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst localUser = getLocalUser();\r\nif (localUser) {\r\n    store.dispatch(setUserInfo(localUser));\r\n}\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <Route path=\"/\" component={App} />\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n","import store from 'store'\r\nexport const USERKEY = \"_user_key\";\r\n\r\nexport const setLocalUser = userinfo => {\r\n    store.set(USERKEY, userinfo);\r\n}\r\n\r\nexport const getLocalUser = () => {\r\n    return store.get(USERKEY);\r\n}\r\n\r\nexport const clearLocalUser = () => {\r\n    store.remove(USERKEY);\r\n}","import React from 'react';\r\n\r\nfunction PageSpin() {\r\n    return (\r\n        <></>\r\n    )\r\n}\r\n\r\nexport default PageSpin;","import Loadable from 'react-loadable';\r\nimport PageSpin from '@components/pageSpin';\r\n\r\nexport const Login = Loadable({\r\n    loader: () => import('@pages/login/login'),\r\n    loading: PageSpin\r\n})\r\n\r\nexport const Admin = Loadable({\r\n    loader: () => import('@pages/admin/admin'),\r\n    loading: PageSpin\r\n})\r\n\r\nexport const Error = Loadable({\r\n    loader: () => import('@pages/error/error'),\r\n    loading: PageSpin\r\n})\r\n\r\n\r\nexport const Home = Loadable({\r\n    loader: () => import('@pages/home/home'),\r\n    loading: PageSpin\r\n})\r\nexport const Income = Loadable({\r\n    loader: () => import('@pages/income/income'),\r\n    loading: PageSpin\r\n})\r\nexport const Bar = Loadable({\r\n    loader: () => import('@pages/charts/bar'),\r\n    loading: PageSpin\r\n})\r\nexport const Line = Loadable({\r\n    loader: () => import('@pages/charts/line'),\r\n    loading: PageSpin\r\n})\r\nexport const Pie = Loadable({\r\n    loader: () => import('@pages/charts/pie'),\r\n    loading: PageSpin\r\n})\r\nexport const User = Loadable({\r\n    loader: () => import('@pages/data/user'),\r\n    loading: PageSpin\r\n})\r\nexport const Role = Loadable({\r\n    loader: () => import('@pages/data/role'),\r\n    loading: PageSpin\r\n})\r\n\r\nexport const Prop = Loadable({\r\n    loader: () => import('@pages/form/prop'),\r\n    loading: PageSpin\r\n})\r\n\r\nexport const Model = Loadable({\r\n    loader: () => import('@pages/form/model'),\r\n    loading: PageSpin\r\n})","import { CHANGE_USERINO, CHANGE_LOGOUT } from \"./type\";\r\nimport { clearLocalUser } from '../utils/local'\r\n\r\nconst defaultUser = {\r\n    info: null,\r\n}\r\n\r\nexport default function reducer(state = defaultUser, action) {\r\n    switch (action.type) {\r\n        case CHANGE_USERINO:\r\n            return {\r\n                ...state,\r\n                info: action.user\r\n            }\r\n        case CHANGE_LOGOUT:\r\n            clearLocalUser();\r\n            return {\r\n                ...state,\r\n                info: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { CHANGE_LOADING, CHANGE_COLLAPSED } from './type';\r\n\r\nconst defaultParams = {\r\n    isLoading: false,\r\n    isCollapsed: false\r\n}\r\n\r\nexport default function reducer(state = defaultParams, action) {\r\n    switch (action.type) {\r\n        case CHANGE_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: action.value\r\n            };\r\n        case CHANGE_COLLAPSED:\r\n            return {\r\n                ...state,\r\n                isCollapsed: action.value\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\nimport { createStore,combineReducers } from 'redux';\r\nimport userReducer from './userReducer';\r\nimport globalReducer from './globalReducer';\r\n\r\nconst reducers=combineReducers({\r\n    userReducer,\r\n    globalReducer\r\n})\r\n\r\nconst store=createStore(\r\n    reducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n\r\nexport default store;","\r\nexport const CHANGE_LOADING = \"change-loading\";\r\n\r\nexport const CHANGE_USERINO = 'change-userinfo';\r\n\r\nexport const CHANGE_COLLAPSED='change-collapsed';\r\n\r\nexport const CHANGE_LOGOUT='change-logout';","import { CHANGE_LOADING, CHANGE_USERINO, CHANGE_COLLAPSED, CHANGE_LOGOUT } from \"./type\";\r\n\r\nexport const setLoading = value => ({\r\n    type: CHANGE_LOADING,\r\n    value\r\n})\r\n\r\nexport const setUserInfo = user => ({\r\n    type: CHANGE_USERINO,\r\n    user\r\n})\r\n\r\nexport const setMenuCollapsed = value => ({\r\n    type: CHANGE_COLLAPSED,\r\n    value\r\n})\r\n\r\nexport const setLogout = () => ({\r\n    type: CHANGE_LOGOUT\r\n})"],"sourceRoot":""}