{"version":3,"sources":["assets/scripts/cow.js","assets/scripts/end.js","assets/scripts/frame_anim.js","assets/scripts/game_scene.js"],"names":["cow_skin","cc","Class","name","properties","cow_anim","default","type","SpriteFrame","extends","Component","cow_skin_set","onLoad","this","anim_com","node","getChildByName","addComponent","c_type","Math","random","floor","_set_cow_anim","speed","sprite_frames","duration","play_loop","update","dt","s","x","removeFromParent","score","Label","txt","start","string","window","onplay","director","loadScene","loop","play_onload","s_com","getComponent","Sprite","sprite","is_playing","play_time","is_loop","end_func","spriteFrame","play_once","stop_anim","index","length","time","rope","Node","cow_prefab","Prefab","cow_root","rope_images","gametime","_this","y","is_throwing","rope_sprite","preloadScene","schedule","unscheduleAllCallbacks","gen_one_cow","cow","instantiate","addChild","scheduleOnce","bind","hit_test","i","childrenCount","children","on_throw_button_click","m1","moveTo","mid_func","callFunc","ctype","m2","seq","sequence","runAction"],"mappings":"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","sourcesContent":["var cow_skin = cc.Class({\r\n    name: \"cow_skin\",\r\n    properties: {\r\n        cow_anim: {\r\n            default: [],\r\n            type: cc.SpriteFrame,\r\n        }, \r\n    }\r\n});\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        \r\n        cow_skin_set: {\r\n            default: [],\r\n            type: cow_skin,\r\n        },\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        // this.game_scene = cc.find(\"UI_ROOT\").getComponent(\"game_scene\");\r\n        this.anim_com = this.node.getChildByName(\"anim\").addComponent(\"frame_anim\");\r\n        this.c_type = Math.random() * 3 + 1;\r\n        this.c_type = Math.floor(this.c_type);\r\n        if (this.c_type > 3) {\r\n            this.c_type = 3;\r\n        }\r\n        \r\n        this._set_cow_anim();\r\n        \r\n        this.speed = -(200 + Math.random() * 100);\r\n    },\r\n    \r\n    _set_cow_anim: function() {\r\n        this.anim_com.sprite_frames = this.cow_skin_set[this.c_type - 1].cow_anim;\r\n        this.anim_com.duration = 0.2;\r\n        this.anim_com.play_loop();\r\n    },\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n        var s = this.speed * dt;\r\n        this.node.x += s;\r\n        if (this.node.x <= -510) {\r\n            // this.game_scene.remove_cow(this.node);\r\n            this.node.removeFromParent();\r\n        }\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        score: {\r\n            type: cc.Label,\r\n            default: null\r\n        },\r\n        txt: {\r\n            type: cc.Label,\r\n            default: null\r\n        }\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start() {\r\n        this.score.string = window.score || 0;\r\n        if (this.score.string <= 2) {\r\n            this.txt.string = \"你真的，好low哦~\"\r\n        } else if (this.score.string <= 5) {\r\n            this.txt.string = \"智商明显提高了，药别停~\"\r\n        } else {\r\n            this.score.string = \"说，你是不是作弊了~\"\r\n        }\r\n    },\r\n    onplay() {\r\n        cc.director.loadScene(\"game_scene\")\r\n    }\r\n    // update (dt) {},\r\n});","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        sprite_frames : {\r\n            default: [],\r\n            type: cc.SpriteFrame,\r\n        },\r\n        \r\n        duration: 0.1, // 帧的时间间隔\r\n        loop: false, // 是否循环播放\r\n        play_onload: false, // 是否在组件加载的时候播放;\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        // 判断一下在组件所挂在的节点上面有没有cc.Sprite组件；\r\n        var s_com = this.node.getComponent(cc.Sprite);\r\n        if (!s_com) { // 没有cc.Sprite组件，要显示图片一定要有cc.Sprite组件,所以我们添加一个cc.Sprite组件;\r\n            s_com = this.node.addComponent(cc.Sprite);\r\n        }\r\n        this.sprite = s_com; // 精灵组件\r\n        // end \r\n        this.is_playing = false; // 是否正在播放;\r\n        this.play_time = 0;\r\n        this.is_loop = false;\r\n        this.end_func = null;\r\n        \r\n        // 显示第0个frame;\r\n        if (this.play_onload) {\r\n             this.sprite.spriteFrame = this.sprite_frames[0];\r\n            if (!this.loop) {\r\n                this.play_once(null);    \r\n            }\r\n            else {\r\n                this.play_loop();\r\n            }\r\n        }\r\n    },\r\n    \r\n    // 实现播放一次,\r\n    play_once: function(end_func) {\r\n        this.play_time = 0;\r\n        this.is_playing = true;\r\n        this.is_loop = false;\r\n        this.end_func = end_func;\r\n    }, \r\n    // end \r\n    \r\n    // 实现循环播放\r\n    play_loop: function() {\r\n        this.play_time = 0;\r\n        this.is_playing = true;\r\n        this.is_loop = true;\r\n    },\r\n    // end \r\n    \r\n    stop_anim: function() {\r\n        this.play_time = 0;\r\n        this.is_playing = false;\r\n        this.is_loop = false;\r\n    }, \r\n    \r\n    start: function() {\r\n        \r\n    },\r\n    \r\n    // called every frame, uncomment this function to activate update callback\r\n    // 每一次刷新的时候需要调用的函数，dt距离上一次刷新过去的时间;\r\n    update: function (dt) {\r\n        if (this.is_playing === false) { // 没有启动播放，不做处理\r\n            return;\r\n        }\r\n        \r\n        \r\n        \r\n        this.play_time += dt; // 累积我们播放的时间;\r\n        \r\n       // 计算时间，应当播放第几帧，而不是随便的下一帧，\r\n       // 否则的话，同样的动画1, 60帧，你在30FPS的机器上你会播放2秒，\r\n       // 你在60FPS的机器上你会播放1秒，动画就不同步;\r\n       \r\n        var index = Math.floor(this.play_time / this.duration); // 向下取整数\r\n        // index\r\n        if (this.is_loop === false) { // 播放一次\r\n            if (index >= this.sprite_frames.length) { // 非循环播放结束\r\n                // 精灵显示的是最后一帧;\r\n                this.sprite.spriteFrame = this.sprite_frames[this.sprite_frames.length - 1];\r\n                // end \r\n                this.is_playing = false;\r\n                this.play_time = 0;\r\n                if (this.end_func) { // 调用回掉函数\r\n                    this.end_func();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                this.sprite.spriteFrame = this.sprite_frames[index];\r\n            }\r\n        }\r\n        else { // 循环播放;\r\n            \r\n            while (index >= this.sprite_frames.length) {\r\n                index -= this.sprite_frames.length;\r\n                this.play_time -= (this.duration * this.sprite_frames.length);\r\n            }\r\n            \r\n            //  在合法的范围之内\r\n            this.sprite.spriteFrame = this.sprite_frames[index];\r\n            // end \r\n        }\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\n\r\n// 定义了一个class, 然后扩展自我们的组件, 自动生成一个组件类的模板;\r\n// new 类的实例;\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    // 属性列表，如果你在这个属性列表里面定义我们的组件实例数据成员，属性，那么，会绑定到我们的编辑器，除非以_开头;\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        time: {\r\n            type: cc.Label,\r\n            default: null\r\n        },\r\n        score: {\r\n            type: cc.Label,\r\n            default: null\r\n        },\r\n        rope: {\r\n            type: cc.Node,\r\n            default: null,\r\n        },\r\n\r\n        cow_prefab: {\r\n            type: cc.Prefab,\r\n            default: null,\r\n        },\r\n\r\n        cow_root: {\r\n            type: cc.Node,\r\n            default: null,\r\n        },\r\n\r\n        rope_images: {\r\n            type: cc.SpriteFrame,\r\n            default: [],\r\n        },\r\n        gametime: 30\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n    // 初始化的入口, 如果你要做初始化，可以在start函数里面来编写代码或调用;\r\n    start() {\r\n        window.score = 0;\r\n        this.rope.y = -560;\r\n        this.is_throwing = false; // 是否正在抛出套神\r\n        this.score.string = 0;\r\n        this.time.string = this.gametime;\r\n        this.rope_sprite = this.rope.getComponent(cc.Sprite);\r\n        this.rope_sprite.spriteFrame = this.rope_images[0];\r\n        cc.director.preloadScene(\"game_end\");\r\n        this.schedule(() => {\r\n            this.time.string -= 1;\r\n            if (this.time.string <= 0) {\r\n                this.unscheduleAllCallbacks();\r\n                cc.director.loadScene(\"game_end\");\r\n            }\r\n        }, 1, this.gametime)\r\n        this.gen_one_cow();\r\n    },\r\n\r\n    gen_one_cow() {\r\n        var cow = cc.instantiate(this.cow_prefab);\r\n        this.cow_root.addChild(cow);\r\n        cow.x = 830;\r\n        cow.y = -102;\r\n\r\n        var time = 2 + Math.random() * 2;\r\n        this.scheduleOnce(this.gen_one_cow.bind(this), time);\r\n    },\r\n    // 每次游戏刷新的时候调用, dt是距离上一次刷新的时间;\r\n    update(dt) {\r\n\r\n    },\r\n\r\n    hit_test() {\r\n        var cow = null;\r\n        // 遍历所有的牛;\r\n        for (var i = 0; i < this.cow_root.childrenCount; i++) {\r\n            cow = this.cow_root.children[i];\r\n            if (cow.x >= 60 && cow.x <= 160) {\r\n                return cow;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    // 抛出套绳的按钮按下\r\n    on_throw_button_click() {\r\n        if (this.is_throwing) {\r\n            return;\r\n        }\r\n\r\n        this.rope_sprite.spriteFrame = this.rope_images[0];\r\n        // this指的是当前的组件实例, this.node指的是当前组件实例所在的节点;\r\n        this.is_throwing = true;\r\n        this.rope.y = -560;\r\n        var m1 = cc.moveTo(1, 0, 20);\r\n\r\n        var mid_func = cc.callFunc(function() {\r\n            var cow = this.hit_test();\r\n            if (cow) { // 套到了牛\r\n                var ctype = cow.getComponent(\"cow\").c_type;\r\n                cow.removeFromParent();\r\n                window.score += 1;\r\n                this.score.string = window.score;\r\n                // 换绳子\r\n                this.rope_sprite.spriteFrame = this.rope_images[ctype];\r\n                this.rope.y = 114;\r\n                // end \r\n            }\r\n        }.bind(this));\r\n\r\n        var m2 = cc.moveTo(0.4, 0, -560);\r\n        var end_func = cc.callFunc(function() {\r\n            this.is_throwing = false;\r\n        }.bind(this));\r\n        var seq = cc.sequence([m1, mid_func, m2, end_func]);\r\n        this.rope.runAction(seq);\r\n    },\r\n});"],"sourceRoot":"/source/","file":"project.js"}